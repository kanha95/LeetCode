/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    
    ListNode merge(ListNode l1, ListNode l2){
        ListNode ans = new ListNode(0);
        ListNode head = ans;
        
        while(l1!=null && l2!=null){
            if(l1.val <= l2.val){
                ans.next = new ListNode(l1.val);
                l1 = l1.next;
            }
            else{
                ans.next = new ListNode(l2.val);
                l2 = l2.next;
            }
            ans = ans.next;
        }
        
        while(l1!=null){
            ans.next = new ListNode(l1.val);
            ans = ans.next;
            l1 = l1.next;
        }
        
        while(l2!=null){
            ans.next = new ListNode(l2.val);
            ans = ans.next;
            l2 = l2.next;
        }
        
        return head.next;
    }

    public ListNode mergeKLists(ListNode[] lists) {
        
        
        
        int len = lists.length;
        
        if(len==0) return null;
        
        int i = 0;
        int j = len-1;
        int end = len-1;
        
        while(end != 0){
            
            if(i>j || i==j){
                end = j;
                i=0;
                continue;
            }
            

            lists[i] = merge(lists[i], lists[j]);
            i++;
            j--;
            
        }
        
        return lists[0];
    }
    public ListNode mergeKLists(ListNode[] lists) {
 
      int last = lists.length-1;
      
      while(last>0){
          
          int start = 0;
          int j = last;
          
          while(start<j){
            lists[start] = merge(lists[start], lists[j]);
            start++;
            j--;
            if(start>=j){
                last = j;
            }
          }      
      }
            
        
        return last>=0?lists[0]:null;
        
    }
}
